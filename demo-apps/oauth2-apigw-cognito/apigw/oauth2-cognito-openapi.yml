openapi: 3.0.3

info:
  title: Cognito OAuth2 Scopes
  description: Securing AWS API Gateway using AWS Cognito OAuth2 Scopes
  version: "1.0.0"

paths:
  /products:
    post: 
      tags: 
        - product
      summary: add a new product to the catalog
      operationId: addProduct 
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWithId'
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Product'
      security:
        - CognitoAuthorizer: [products/create_product]      
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${create_product_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: aws_proxy
        content_handling: CONVERT_TO_TEXT
      x-amazon-gateway-auth:
        type: NONE
  /products/{productId}:
    get: 
      tags:
        - product
      summary: get a Product by ID
      description: Returns a single Product
      operationId: getProductByID 
      parameters:
        - name: productId 
          in: path 
          required: true 
          description: product ID for the Product
          schema:
            type: string
      responses:
        '200':
          description: successful operation 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWithId'
        '405':
          description: Invalid input
      security:
        - CognitoAuthorizer: [products/read_product]   
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${get_product_arn}/invocations"
        passthroughBehavior: "when_no_match" 
        httpMethod: POST
        timeoutInMillis: ${lambda_identity_timeout}
        type: aws_proxy
        content_handling: CONVERT_TO_TEXT
      x-amazon-apigateway-auth:
        type: NONE
    delete:
      tags: 
        - product
      summary: delete a Product by ID
      description: Deletes a single Product
      operationId: deleteProduct
      parameters:
        - name: productId 
          in: path 
          required: true 
          description: product ID for the Product
          schema:
            type: string
      responses:
        "204": 
          description: successful operation
      security:
        - CognitoAuthorizer: [products/delete_product]
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${delete_product_arn}/invocations"
        passthroughBehavior: "when_no_match" 
        httpMethod: POST
        timeoutInMillis: ${lambda_identity_timeout}
        type: aws_proxy
        content_handling: CONVERT_TO_TEXT
      x-amazon-apigateway-auth:
        type: NONE
components:
  schemas:
    Product: 
      type: object 
      required:
        - name 
        - description 
      properties: 
        id: 
          type: integer
          format: int64
        name: 
          type: string
        description:
          type: string
    ProductWithId:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          required: 
            - productId 
          properties:
            product_id:
              type: string
              format: uuid
  requestBodies:
    Product: 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
  securitySchemes:
    CognitoAuthorizer:
      type: apiKey 
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer: 
        type: cognito_user_pools
        providerARNs:
          - ${user_pool_arn}
